#!/usr/bin/ruby

require 'rubygems'
require 'yaml'
require 'pp'
require 'ruby-debug'
require 'logger'

$debug = false

class HardLinkRsyncBackup
  CONFIG_DIR='/etc/hlrb/'
  BACKUP_DIR='/mnt/6T/hlrb/'
  RSYNC_OPTIONS='-avHxz'

  def initialize
    init_log
    set_time_vars
    read_host_config
    find_latest_backup
  end

  def run
    @log.info "Beginning backup of #{@host_config[:hostname]}"

    create_hard_link_copy
    rsync_file_systems


    @log.info "Successfully completed backup of #{@host_config[:hostname]}"
  end

  def create_hard_link_copy
    cmd = "/bin/cp -al #{@latest_backup} #{@start_time_clean}"
    @log.debug "Hard link copy command: #{cmd}"
    @log.info "Copying  #{@latest_backup} to #{@start_time_clean} via hard links"
    `#{cmd}`
    #system('/bin/true')
    if $? != 0
      raise "Copy command <#{cmd}> failed with return code #{$?}"
    end
    @log.info "Copy complete"
  end # def create_hard_link_copy

  def rsync_file_systems
    @host_config[:file_systems].keys.sort.each do |fs_name|
      rsync_file_system(fs_name)
    end
  end # def rsync_file_systems

  def rsync_file_system(fs_name)
    fs = @host_config[:file_systems][fs_name]
    rsync = "/usr/bin/rsync"
    options = @host_config[:rsync_options] || RSYNC_OPTIONS
    command = [rsync, options]
    if fs[:excludes]
      excludes = fs[:excludes].map{|e| ['--exclude', e]}.flatten
      command += excludes
    end
    command << (hostpath(fs) + sourcepath(fs))
    command << (@start_time_clean + sourcepath(fs))
    @log.debug command.pretty_inspect

    @log.info "Begin rsync of the '#{fs_name}' file_system"
    system(*command)
    #system('/bin/true')
    if $? != 0
      raise "Copy command <#{cmd}> failed with return code #{$?}"
    end
    @log.info "Completed rsync of the '#{fs_name}' file_system"
  end # def rsync_file_system

  def hostpath(fs)
    user = @host_config[:username] || fs[:username] || 'root'
    host = @host_config[:hostname]
    return "#{user}@#{host}:"
  end # def hostpath

  def sourcepath(fs)
    path = fs[:path]
    if ! path.match(/\/$/)
      path += '/'
    end
    return path
  end

  def init_log
    @log = Logger.new(STDERR)
    @log.level=Logger::DEBUG
  end # def init_log

  def set_time_vars
    @start_time = Time.now
    # format for filename inclusion and strip seconds
    @start_time_clean = @start_time.strftime('%Y-%m-%d_%H-%M-00')
    @log.info "Starting hlrb for host #{ARGV[0]} at #{@start_time_clean}"
  end # def set_time_vars

  def read_host_config
    hostname = ARGV[0]

    host_confg_yaml = File.read(CONFIG_DIR + hostname + '.yaml')
    @host_config = YAML::load(host_confg_yaml)

    @log.debug @host_config.pretty_inspect
  end # def read_host_config

  def find_latest_backup
    @original_pwd = Dir.pwd
    Dir.chdir(BACKUP_DIR + @host_config[:hostname])
    @latest_backup = Dir.glob('20*').grep(/^20\d\d-\d\d-\d\d_\d\d-\d\d-\d\d$/).sort[-1]
    if ! @latest_backup
      raise "No existing base backup.  Possibly mkdir #{BACKUP_DIR + @host_config[:hostname] + '/' + @start_time_clean}"
    else
      @log.info "Found previous backup to be #{@latest_backup}"
    end
  end # def find_latest_backup
end

HardLinkRsyncBackup.new.run

exit

__END__
REMOTE_HOST=$1
shift



SOURCE=${REMOTE_HOST}:/

  if [ -n "$BACKUP_PATH" ]; then
    TARGET_DIR="${TARGET_DIR}_${BACKUP_PATH/\//_}"
    SOURCE="${SOURCE}${BACKUP_PATH}"
    fi

    cd $TARGET_DIR

    LATEST=`ls -1 | grep ^201[0-9] | tail -1`
    echo $LATEST
    DATE=`date +%Y-%m-%d_%H-%M-00`
    echo $DATE

    date > log/${DATE}.log

    pwd

    cp -al $LATEST/. $DATE

    date >> log/${DATE}.log

    cd $DATE

    CMD="rsync -avPHxz --exclude core --delete $* ${SOURCE}/. ${TARGET_DIR}/${DATE}/"
    echo $CMD >> ../log/${DATE}.log 2>&1
    $CMD >> ../log/${DATE}.log 2>&1
